4.1{
	Preencha as lacunas em cada uma das seguintes afirmações:
	a) Todos os programas podem ser escritos em termos de três tipos de estruturas de controle: ________ , ________ e ________ .
	b) A instrução ________ é utilizada para executar uma ação quando uma condição for verdadeira e outra quando essa condição for falsa.
	c) Repetir um conjunto de instruções por um número específico de vezes é chamado de repetição ________ .
	d) Quando não se sabe antecipadamente quantas vezes um conjunto de instruções será repetido, um valor de ________ pode ser utilizado
	para terminar a repetição.
	e) A estrutura de ________ é construída em Java; por padrão, instruções são executadas na ordem que elas aparecem.
	f) As variáveis de instância dos tipos char , byte , short , int , long , float e double recebem o valor ________ por padrão.
	g) O Java é uma linguagem ________; ele requer que todas as variáveis tenham um tipo.
	h) Se o operador de incremento for ________ para uma variável, primeiro a variável é incrementada por 1 e, então, seu novo valor é
	utilizado na expressão.

	a) sequencia, seleção, repetição
	b) if-else
	c) contador
	d) de sentinela, de sinal, de flag, ou fictício
	e) sequencia
	f) 0
	g) tipada
	h) ++x

}

--------------------------------------------------------------------------
4.2{
	Determine se cada um dos seguintes é verdadeiro ou falso. Se falso, explique por quê.
	a) Um algoritmo é um procedimento para resolver um problema em termos das ações a serem executadas e da ordem em que essas ações
	são executadas.
	b) Um conjunto de instruções dentro de um par de parênteses é chamado bloco.
	c) Uma instrução de seleção especifica que uma ação deve ser repetida enquanto algumas condições permanecem verdadeiras.
	d) Uma instrução de controle aninhada aparece no corpo de uma outra instrução de controle.
	e) O Java fornece os operadores aritméticos de atribuição compostos += , -= , *= , /= e %= para abreviar expressões de atribuição.
	f) Os tipos primitivos ( boolean , char , byte , short , int , long , float e double ) são portáveis somente em plataformas Windows.
	g) Especificar a ordem em que as instruções são executadas em um programa é chamado controle de programa.
	h) O operador de coerção unário (double) cria uma cópia temporária do tipo inteiro do seu operando.
	i) Atribui-se às variáveis de instância do tipo boolean o valor true por padrão.
	j) O pseudocódigo ajuda você a pensar sobre um programa antes de tentar escrevê-lo em uma linguagem de programação.
	
	
	a) V
	b) F
	c) F
	d) V
	e) V
	f) F
	g) V
	h) F
	i) F
	j) V
}

--------------------------------------------------------------------------
4.3{
	
	Escreva quatro instruções Java diferentes que adicionam 1 à variável de inteiro x.
	
	x++;
	++x;
	x+=1;
	x = 1;

}

--------------------------------------------------------------------------
4.4{
	Escreva instruções Java para realizar cada uma das seguintes tarefas:
	a) Utilize uma instrução para atribuir a soma de x e y a z , em seguida, incremente x por 1.
	b) Teste se a variável contador é maior do que 10. Se for, imprima "Contador é maior que 10" .
	c) Utilize uma instrução para decrementar a variável x por 1, então subtraia-o da variável total e armazene o resultado na variável
	total .
	d) Calcule o resto após q ser dividido por divisor e atribua o resultado a q . Escreva essa instrução de duas maneiras diferentes.
	
	
	a) {
		z = x++ + y;
	}
	
	b{
		if(count > 10)
			System.out.println("Count é maior que 10");
	}
	
	c{
		total -= --x;
	}
	
	d{
		 q %= divisor
		 q = q % divisor
	}
}
--------------------------------------------------------------------------

4.5{
	Escreva uma instrução Java para realizar cada uma das seguintes tarefas:
	a) Declarar variáveis sum do tipo int e inicialize-as como 0.
	b) Declarar variáveis x do tipo int e inicialize-as como 0.
	c) Adicione a variável x à variável sum , e atribua o resultado à variável sum .
	d) Imprima "A soma é: " seguido pelo valor da variável sum .
	
	
	int sum = 0;
	int x = 0;
	
	sum += x;
	System.out.println("A soma é: " + sum);
	

}
--------------------------------------------------------------------------
4.6{
	Combine as instruções escritas no Exercício 4.5 em um aplicativo Java que calcula e imprime a soma dos inteiros de 1 a 10. Utilize a ins-
trução while para fazer loop pelas instruções de cálculo e incremento. O loop deve terminar quando o valor de x tornar-se 11.

	public class Calculate
	{
		public static void main(String[] args)
		{
			int sum = 0;
			int x = 1;
			while (x <= 10) 
			{
				sum += x; // adiciona x a soma
				++x;
			}
			System.out.println("A sum é: " + sum);
		}
	}
	
	saida na tela = A sum é: 55

}
--------------------------------------------------------------------------

4.7{

	Determine o valor das variáveis na instrução product
	do tipo int e inicialmente tenham o valor 5.
	
	int y = 5;
	int x = 5;
	
	y *= x++
	
	System.out.println("y: " + y);
	System.out.println("x: " + x);
	
	saida na tela = y: 26
		      = x: 6
	
}
--------------------------------------------------------------------------
4.8{
	Identifique e corrija os erros em cada um dos seguintes conjuntos de código:
	a) 
	while (c <= 5)
	{
		product *= c;
		++c;
	
	b)
	if (gender == 1)
		System.out.println("Woman");
	else;
		System.out.println("Man");
		
		
	a) a instrução while não contem a chave de fechamento do bloco -> }
	b) O else contém um -> ; dizendo que a instrução acabou, isso pode gerar um erro ao exeutar o código
}
--------------------------------------------------------------------------
4.9{
	O que há de errado com a instrução while a seguir?
	while (z >= 0)
		sum += z;
		
	o programa entrará em um loop infinito, pois z sempre será maior ou igual a zero, para corrigir, 
	o correto seria utilizar a operação de decremento: sum += --z;
}
